title: "Train a pipeline from a UD corpus"
description: "The project shows how to train a pipeline with a tagger, morphologizer and parser from a UD corpus."
# Variables can be references across the project.yml using ${vars.var_name}
vars:
  config: "config.cfg"
  name: "ud_en_ewt_pipeline"
  version: "0.0.0"
  lang: "en"
  train: "ud_en_ewt_train"
  dev: "ud_en_ewt_dev"
  test: "ud_en_ewt_test"
  gpu: 0

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "configs", "scripts", "corpus", "packages", "metas", "output"]

# Assets that should be downloaded or available in the directory.
assets:
  - dest: "assets/${vars.train}.conllu"
    checksum: "86b3b7380b2712845134171f7c4e1f35"
    description: "UD English EWT train"
    url: "https://raw.githubusercontent.com/UniversalDependencies/UD_English-EWT/r2.6/en_ewt-ud-train.conllu"
  - dest: "assets/${vars.dev}.conllu"
    checksum: "e8ab1836d37e6c96803f1eecd436dcc9"
    description: "UD English EWT dev"
    url: "https://raw.githubusercontent.com/UniversalDependencies/UD_English-EWT/r2.6/en_ewt-ud-dev.conllu"
  - dest: "assets/${vars.test}.conllu"
    checksum: "4de7a09f7292ecb1f0438dfe3c4b6662"
    description: "UD English EWT test"
    url: "https://raw.githubusercontent.com/UniversalDependencies/UD_English-EWT/r2.6/en_ewt-ud-test.conllu"

# Workflows are sequences of commands (see below) executed in order. You can
# run them via "spacy project run [workflow]". If a commands's inputs/outputs
# haven't changed, it won't be re-run.
workflows:
  all:
    - preprocess
    - train
    - evaluate

# Project commands, specified in a style similar to CI config files (e.g. Azure
# pipelines). The name is the command name that lets you trigger the command
# via "spacy project run [command] [path]". The help message is optional and
# shown when executing "spacy project run [optional command] [path] --help".
commands:
  - name: "preprocess"
    help: "Convert the data to spaCy's binary format"
    script:
      - "python -m spacy convert -n 10 -T assets/${vars.train}.conllu corpus"
      - "python -m spacy convert -n 10 -T assets/${vars.dev}.conllu corpus"
    deps:
      - "assets/${vars.train}.conllu"
      - "assets/${vars.dev}.conllu"
    outputs:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"

  - name: "train"
    help: "Train a tagger, a morphologizer and a parser"
    script:
      - "python -m spacy train configs/${vars.config} --output training/ --paths.train corpus/${vars.train}.spacy --paths.dev corpus/${vars.dev}.spacy --nlp.lang ${vars.lang} -g ${vars.gpu}"
    deps:
      - "corpus/${vars.train}.spacy"
      - "corpus/${vars.dev}.spacy"
    outputs:
      - "training/model-best"

  - name: "evaluate"
    help: "Evaluate the model and export metrics"
    script:
      - "python scripts/evaluate.py training/model-best assets/${vars.test}.conllu output/metrics.txt"
    deps:
      - "assets/${vars.test}.conllu"
      - "training/model-best"
    outputs:
      - "output/metrics.txt"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/model-best packages --meta-path ./metas/${vars.name}.json --version ${vars.version} --force"
    deps:
      - "training/model-best"
    outputs_no_cache:
      - "packages/${vars.lang}_${vars.name}-${vars.version}/dist/${vars.lang}_${vars.name}-${vars.version}.tar.gz"
