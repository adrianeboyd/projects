title: "Universal Dependencies v2.5 Benchmarks"
description: "This project template lets you train a tokenizer, lemmatizer, part-of-speech tagger, a morphologizer and a dependency parser from a [Universal Dependencies](https://universaldependencies.org/) corpus (v2.5). It takes care of downloading the treebank, converting it to spaCy's format and training and evaluating the model. The template uses the [`UD_English-EWT`](https://github.com/UniversalDependencies/UD_English-EWT) treebank by default, but you can swap it out for any other available treebank. Just make sure to adjust the `ud_treebank` and `spacy_lang` settings in the config. Use `xx` (multi-language) for `spacy_lang` if a particular language is not supported by spaCy."

# Variables can be referenced across the project.yml using ${vars.var_name}
vars:
  ud_treebank: "UD_English-EWT"
  # use "xx" for a language not currently supported by spaCy
  spacy_lang: "en"
  package_name: "udv25_englishewt_trf"
  transformer_model: "xlm-roberta-base"
  gpu: 0
  mixed_precision: true
  package_version: "0.0.1"

# These are the directories that the project needs. The project CLI will make
# sure that they always exist.
directories: ["assets", "training", "metrics", "packages"]

assets:
  - dest: "assets/ud-treebanks-v2.5.tgz"
    url: "https://lindat.mff.cuni.cz/repository/xmlui/bitstream/handle/11234/1-3105/ud-treebanks-v2.5.tgz?sequence=1&isAllowed=y"
    checksum: "388456892760ada0db8e20ce58501025"

workflows:
  all:
    - extract
    - convert
    - train-tokenizer
    - train-lemmatizer
    - init-labels-transformer
    - train-transformer
    - assemble
    - evaluate
    - package

commands:
  - name: extract
    help: "Extract the data"
    script:
      - "tar xf assets/ud-treebanks-v2.5.tgz -C assets/"
    deps:
      - "assets/ud-treebanks-v2.5.tgz"
    outputs:
      - "assets/ud-treebanks-v2.5/"

  - name: convert
    help: "Convert the data to spaCy's format"
    script:
      - "python scripts/copy_files.py train conllu assets/ud-treebanks-v2.5/${vars.ud_treebank}/ corpus/${vars.ud_treebank}/train/"
      - "python scripts/copy_files.py dev conllu assets/ud-treebanks-v2.5/${vars.ud_treebank}/ corpus/${vars.ud_treebank}/dev"
      - "python -m spacy convert corpus/${vars.ud_treebank}/train/ corpus/${vars.ud_treebank}/ --converter conllu -n 10 -T -C"
      - "python -m spacy convert corpus/${vars.ud_treebank}/dev/ corpus/${vars.ud_treebank}/ --converter conllu -n 10 -T -C"
    deps:
      - "assets/ud-treebanks-v2.5/"
    outputs:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"

  - name: train-tokenizer
    help: "Train tokenizer"
    script:
      - "python -m spacy train configs/tokenizer.cfg -o training/${vars.ud_treebank}/tokenizer --gpu-id ${vars.gpu} --nlp.lang ${vars.spacy_lang} --paths.train corpus/${vars.ud_treebank}/train.spacy --paths.dev corpus/${vars.ud_treebank}/dev.spacy"
    deps:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"
      - "configs/tokenizer.cfg"
    outputs:
      - "training/${vars.ud_treebank}/tokenizer/model-best"

  - name: train-lemmatizer
    help: "Train lemmatizer"
    script:
      - "python -m spacy train configs/lemmatizer.cfg -o training/${vars.ud_treebank}/lemmatizer --gpu-id ${vars.gpu} --nlp.lang ${vars.spacy_lang} --paths.train corpus/${vars.ud_treebank}/train.spacy --paths.dev corpus/${vars.ud_treebank}/dev.spacy --components.elephant_ner_tokenizer.source training/${vars.ud_treebank}/tokenizer/model-best"
    deps:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"
      - "configs/lemmatizer.cfg"
      - "training/${vars.ud_treebank}/tokenizer/model-best"
    outputs:
      - "training/${vars.ud_treebank}/lemmatizer/model-best"

  - name: init-labels-transformer
    help: "Initialize labels for transformer components from gold tokenization"
    script:
      - "python -m spacy init labels configs/transformer.cfg corpus/${vars.ud_treebank}/ --gpu-id ${vars.gpu} --nlp.lang ${vars.spacy_lang} --paths.train corpus/${vars.ud_treebank}/train.spacy --paths.dev corpus/${vars.ud_treebank}/dev.spacy --components.elephant_ner_tokenizer.source training/${vars.ud_treebank}/tokenizer/model-best --components.transformer.model.name ${vars.transformer_model} --corpora.train.gold_preproc true --corpora.dev.gold_preproc true --paths.labels corpus/UD_English-EWT"
    deps:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"
      - "configs/transformer.cfg"
      - "training/${vars.ud_treebank}/tokenizer/model-best"
    outputs:
      - "corpus/${vars.ud_treebank}/morphologizer.json"
      - "corpus/${vars.ud_treebank}/parser.json"
      - "corpus/${vars.ud_treebank}/tagger.json"

  - name: train-transformer
    help: "Train transformer"
    script:
        - "python -m spacy train configs/transformer.cfg -o training/${vars.ud_treebank}/transformer --gpu-id ${vars.gpu} --nlp.lang ${vars.spacy_lang} --paths.train corpus/${vars.ud_treebank}/train.spacy --paths.dev corpus/${vars.ud_treebank}/dev.spacy --components.elephant_ner_tokenizer.source training/${vars.ud_treebank}/tokenizer/model-best --components.transformer.model.name ${vars.transformer_model} --paths.labels corpus/${vars.ud_treebank} --components.transformer.model.mixed_precision ${vars.mixed_precision}"
    deps:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"
      - "configs/transformer.cfg"
      - "corpus/${vars.ud_treebank}/morphologizer.json"
      - "corpus/${vars.ud_treebank}/parser.json"
      - "corpus/${vars.ud_treebank}/tagger.json"
      - "training/${vars.ud_treebank}/tokenizer/model-best"
    outputs:
      - "training/${vars.ud_treebank}/transformer/model-best"

  - name: assemble
    help: "Assemble full pipeline"
    script:
      - "python -m spacy assemble configs/assemble.cfg training/${vars.ud_treebank}/final --nlp.lang ${vars.spacy_lang} --paths.train corpus/${vars.ud_treebank}/train.spacy --paths.dev corpus/${vars.ud_treebank}/dev.spacy --paths.tokenizer_source training/${vars.ud_treebank}/tokenizer/model-best --paths.lemmatizer_source training/${vars.ud_treebank}/lemmatizer/model-best --paths.transformer_source training/${vars.ud_treebank}/transformer/model-best"
    deps:
      - "corpus/${vars.ud_treebank}/train.spacy"
      - "corpus/${vars.ud_treebank}/dev.spacy"
      - "configs/assemble.cfg"
      - "training/${vars.ud_treebank}/tokenizer/model-best"
      - "training/${vars.ud_treebank}/lemmatizer/model-best"
      - "training/${vars.ud_treebank}/transformer/model-best"
    outputs:
      - "training/${vars.ud_treebank}/final"

  - name: evaluate
    help: "Evaluate on the test data and save the metrics"
    script:
      - "python scripts/evaluate.py training/${vars.ud_treebank}/final assets/ud-treebanks-v2.5/${vars.ud_treebank}/ --output metrics/${vars.ud_treebank}.txt --gpu-id ${vars.gpu}"
    deps:
      - "training/${vars.ud_treebank}/final"
      - "assets/ud-treebanks-v2.5/${vars.ud_treebank}/"
    outputs:
      - "metrics/${vars.ud_treebank}.txt"

  - name: package
    help: "Package the trained model so it can be installed"
    script:
      - "python -m spacy package training/${vars.ud_treebank}/final packages --name ${vars.package_name} --version ${vars.package_version} --force"
    deps:
      - "training/${vars.ud_treebank}/final"
    outputs_no_cache:
      - "packages/${vars.package_name}-${vars.package_version}/dist/${vars.package_name}-${vars.package_version}.tar.gz"

  - name: clean
    help: "Remove intermediate files"
    script:
      - "rm -rf training/*"
      - "rm -rf metrics/*"
      - "rm -rf corpus/*"
